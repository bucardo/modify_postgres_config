#!perl

## Adjust Postgres configuration settings automatically
##
## Greg Sabino Mullane <greg@endpoint.com>
##
## Usage:
## $0 --pgconf=<filename> --change log_statement=all
##
## Returns the size and name of the latest logfile

use strict;
use warnings;
use 5.006000;
use DBI;
use Data::Dumper qw( Dumper     );
use Getopt::Long qw( GetOptions );
use Fcntl        qw( :flock     );
use Time::HiRes  qw( sleep      );

our $VERSION = '1.2.3';

use vars qw/ $dbh $confh $pgpid /; ## no critic (ProhibitPackageVars)

my %opt = (
           verbose => 0,
           quiet   => 0,
           debug   => 0,
           force   => 0,
           pgconf  => '',
           dbport  => 5432,
           dbhost  => '',
           dbuser  => 'postgres',
           comment => 1,
           report  => 1,
);

my $USAGE = "Usage $0 --pgconf <file> --change foo=bar\n";

GetOptions(\%opt,
       'verbose+',
       'quiet',
       'debug',
       'help',
       'pgconf=s',
       'dbport|port=i',
       'dbuser|user=s',
       'dbhost|host=s',
       'change=s@',
       'force',
       'comment!',
       'report!',
) or die $USAGE;

$opt{help} and die $USAGE;

if ($opt{version}) {
    print "$0 version $VERSION\n";
    exit 0;
}

END {
    if (defined $confh) {
        close $confh or warn qq{Could not close "$opt{pgconf}": $!\n};
    }
    if (defined $dbh) {
        $dbh->disconnect();
    }
}

## Figure out what to do
if ($opt{change}) {
    change_config_values($opt{change});
}

die $USAGE;



sub change_config_values { ## no critic (ProhibitExcessComplexity)

    my $changelist = shift or die qq{Need an argument!\n};

    ## Quickly sanity check each one
    my @items;
    for my $item (@{ $changelist }) {
        if ($item !~ /(\w+)\s*=\s*(.+)/) {
            die "Usage: --change setting=newvalue\n";
        }
        push @items => [$1,$2]; ## no critic (ProhibitCaptureWithoutTest)
    }

    my %verified = map { $_->[0] => [0,'?'] } @items;

    my $changes = 0;
    for my $item (@items) {
        my ($name,$newvalue) = @{ $item };

        ## Does this name exist, and what is the current value?
        my $oldvalue = get_postgres_val($name);

        ## Strip off single quotes if something is inside them
        $newvalue =~ s/^'(.+)'$/$1/;

        ## No need to do anything if they agree (unless forced)
        if ($oldvalue eq $newvalue) {
            if (!$opt{force}) {
                $opt{quiet} or print qq{No change made: value of "$name" is already $newvalue\n};
                $verified{$name} = [2, $newvalue];
                next;
            }
            $opt{quiet} or print qq{Value of "$name" is already $newvalue, but forcing a change anyway\n};
        }

        ## Make the change in the configuration file
        change_config_var($name, $newvalue, $oldvalue);

        $changes++;

    }

    ## In case nothing needed changing and --force was not set:
    if (!$changes) {
        if ($opt{verbose}) {
            print qq{No changes made, so exiting\n};
        }
        exit 1;
    }

    ## Before the HUP, report the file size and name
    if (!$opt{quiet} and $opt{report}) {
        my ($logsize, $logname) = current_log_file_size();
        print "$logsize $logname\n";
    }

    ## Send Postgres a signal so it reads the new file
    hup_postgres();

    ## Double check the new values have been set
    my $timeout = 30;
    my $verified_changes = 0;
    LOOP: {
          for my $item (@items) {
              my ($name,$newvalue) = @{ $item };
              next if $verified{$name}->[0];
              my $changedvalue = get_postgres_val($name);
              ## May be a millisecond value
              if ($newvalue =~ /^\d+$/ and $changedvalue =~ /^\d+ms$/) {
                  $changedvalue =~ s/ms$//;
              }
              if ($changedvalue eq $newvalue) {
                  $verified{$name} = [1, $newvalue];
                  $verified_changes++;
              }
          }

          last if $verified_changes >= $changes;

          sleep 0.2;
          redo if $timeout--;
    }

    for my $k (sort keys %verified) {
        if (! $verified{$k}->[0]) {
            warn qq{Failed to detect new value for setting "$k"\n};
        }
        next if ! $opt{verbose};
        if ($verified{$k}->[0] == 1) {
            print qq{Changed the setting "$k" to "$verified{$k}->[1]"\n};
        }
        elsif ($verified{$k}->[0] == 2) {
            print qq{Did not change the setting "$k": already was "$verified{$k}->[1]"\n};
        }
    }

    exit 0;

} ## end of change_config_values


sub get_postgres_val {

    my $name = shift or die qq{Need a variable name!\n};

    $dbh ||= connect_database();

    $name =~ /^\w+$/ or die qq{Invalid variable name!\n};
    my $SQL = "SHOW $name";

    my $val;
    eval { ## no critic (RequireCheckingReturnValueOfEval)
        $val = $dbh->selectall_arrayref($SQL)->[0][0];
    };
    if ($@) {
        if ($@ =~ /unrecognized/) {
            die qq{There is no Postgres variable named "$name"!\n};
        }
        die $@;
    }

    return $val;

} ## end of get_postgres_val


sub connect_database {

    my $dsn = 'dbi:Pg:dbname=postgres';
    $opt{host} and $dsn .= ";host=$opt{host}";
    $opt{port} and $dsn .= ";port=$opt{port}";
    my $dbuser = $opt{dbuser};

    $dbh = DBI->connect($dsn, $dbuser, '', {AutoCommit=>0, RaiseError=>1, PrintError=>0});
    $dbh->ping();

    return $dbh;

} ## end of connect_database


sub change_config_var {

    my $name     = shift or die qq{Need a variable name!\n};
    my $newvalue = shift;
    defined $newvalue or die qq{Need a variable value!\n};
    my $oldvalue = shift || get_postgres_val($name);

    ## We may modify the original, so create a new var
    my $changedvalue = $newvalue;

    ## We usually want to quote alphabetic things
    if ($changedvalue =~ /^[A-Z]/i ## no critic (ProhibitEnumeratedClasses)
			and $changedvalue ne 'on'
			and $changedvalue ne 'off') {
        $changedvalue = qq{'$changedvalue'};
    }

    ## Put in a little blurb for record keeping
    if ($opt{comment}) {
        my $now = scalar localtime;
        $changedvalue .= " ## changed by $0 on $now";
    }

    $confh ||= get_config_handle();

    flock $confh, LOCK_EX; ## no critic (ProhibitCallsToUndeclaredSubs)
    seek $confh, 0, 0;
    my $slurp;
    {
        local $/ = undef;
        $slurp = <$confh>;
    }

    ## Change only the latest uncommented version
    my $count = $slurp =~ s{^(\s*$name\s*=\s*)(?!.*^\s*$name\s*).+?$}{$1$changedvalue}ms;

    seek $confh, 0, 0;
    print {$confh} $slurp;
    truncate $confh, tell $confh;

    flock $confh, LOCK_UN; ## no critic (ProhibitCallsToUndeclaredSubs)

    $opt{verbose} and print qq{Changed "$name" from $oldvalue to $newvalue\n};

    return $count;

} ## end of change_config_var


sub get_config_handle {

    my $file = $opt{pgconf} or die qq{Need to specify --pgfile\n};

    open $confh, '+<', $file or die qq{Could not open "$file": $!\n};

    return $confh;

} ## end of get_config_handle


sub hup_postgres {

    $pgpid ||= get_postgres_pid();

    if (! $pgpid) {
        return 0;
    }

    $opt{verbose} and print "Doing a kill -HUP on PID $pgpid\n";

    my $count = kill 1 => $pgpid;

    return $count;

} ## end of hup_postgres


sub get_postgres_pid {

    my $datadir = get_postgres_val('data_directory');

    my $pidfile = "$datadir/postmaster.pid";

    if (! -e $pidfile) {
        warn qq{Could not find a postmaster.pid file at $pidfile\n};
        return 0;
    }

    open my $fh, '<', $pidfile or die qq{Could not open "$pidfile": $!\n};
    <$fh> =~ /(\d+)/ or die qq{PID file $pidfile did not start with a number!\n};
    close $fh or warn qq{Could not close file "$pidfile": $!\n};

    return $1;

} ## end of get_postgres_pid


sub get_config_var {

    my $name = shift or die qq{Need a variable name!\n};

    $confh ||= get_config_handle();

    flock $confh, LOCK_EX; ## no critic (ProhibitCallsToUndeclaredSubs)
    seek $confh, 0, 0;
    my $variable;
    while (<$confh>) {
        if (/^\s*$name\s*=\s*(.+)/) {
            $variable = $1;
        }
    }
    flock $confh, LOCK_UN; ## no critic (ProhibitCallsToUndeclaredSubs)

    defined $variable or die "Variable not found: $name\n";

    return $variable;

} ## end of get_config_var


sub current_log_file_size {

    my $logdir = get_postgres_val('log_directory');

    if ($logdir !~ m{^/}) {
        my $datadir = get_postgres_val('data_directory');
        $logdir = "$datadir/$logdir";
    }

    ## Making a few assumptions here...
    my $COM = "ls -1rt $logdir | grep post | tail -1";

    my $output = qx($COM);

    chomp $output;

    $opt{verbose} and print "File is probably: ($output)\n";

    return -s "$logdir/$output", "$logdir/$output";

} ## end of current_log_file_size

